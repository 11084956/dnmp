version: "3"
services:

  # Nginx是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - default

  # 默认 php8.* 版本
  php:
    build:
      context: ./services/php
      args:
        PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
        TZ: "$TZ"
    container_name: php
    expose:
      - 9501
    extra_hosts:
      - "www.site1.com:172.17.0.1"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP_LOG_DIR}:/var/log/php
      - ${DATA_DIR}/composer:/tmp/composer
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default

  # 默认 php5.7.* 版本
  #  php57:
  #    build:
  #      context: ./services/php
  #      args:
  #        PHP_VERSION: php:${PHP57_VERSION}-fpm-alpine
  #        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #        PHP_EXTENSIONS: ${PHP57_EXTENSIONS}
  #        TZ: "$TZ"
  #    container_name: php57
  #    expose:
  #      - 9501
  #    volumes:
  #      - ${SOURCE_DIR}:/www/:rw
  #      - ${PHP57_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
  #      - ${PHP57_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
  #      - ${PHP57_LOG_DIR}:/var/log/php
  #      - ${DATA_DIR}/composer:/tmp/composer
  #    restart: always
  #    cap_add:
  #      - SYS_PTRACE
  #    networks:
  #      - default

  # MySQL8.* 版本
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    volumes:
      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw
      - ${MYSQL_LOG_DIR}:/var/log/mysql/:rw
    restart: always
    networks:
      - default
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: "$TZ"

  # MySQL5.7.* 版本
  #  mysql5:
  #    image: mysql:${MYSQL5_VERSION}
  #    container_name: mysql5
  #    ports:
  #      - "${MYSQL5_HOST_PORT}:3306"
  #    volumes:
  #      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
  #      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
  #    restart: always
  #    networks:
  #      - default
  #    environment:
  #      MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
  #      TZ: "$TZ"



  # OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，
  # 其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。
  # 用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。
  openresty:
    image:  openresty/openresty:${OPENRESTY_VERSION}
    container_name: openresty
    ports:
      - "${OPENRESTY_HTTP_HOST_PORT}:80"
      - "${OPENRESTY_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${OPENRESTY_CONFD_DIR}:/etc/nginx/conf.d/:ro
      - ${OPENRESTY_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${OPENRESTY_CONF_FILE}:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ${OPENRESTY_FASTCGI_PHP_CONF}:/usr/local/openresty/nginx/conf/fastcgi-php.conf:ro
      - ${OPENRESTY_CONF_FASTCGIPARAMS_FILE}:/usr/local/openresty/nginx/conf/fastcgi_params:ro
      - ${OPENRESTY_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TZ"
    networks:
      - default

  # 默认redis 6.* 版本
  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
      - ${DATA_DIR}/redis:/data/:rw
      - ${REDIS_LOG_DIR}:/var/log/redis/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
      TZ: "$TZ"
    networks:
      - default

  # RabbitMQ轻巧，易于在内部和云中部署。它支持多种消息传递协议。
  # RabbitMQ可以部署在分布式和联合配置中，以满足大规模，高可用性的要求。
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}
    container_name: rabbitmq
    restart: always
    ports:
      - "${RABBITMQ_HOST_PORT_C}:5672"
      - "${RABBITMQ_HOST_PORT_S}:15672"
    environment:
      TZ: "$TZ"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    networks:
      - default


  # phpRedisAdmin是用于管理Redis 数据库的简单Web界面。
  # 它是根据 知识共享署名3.0许可发行的。该代码由Erik Dubbelboer开发和维护。
  phpredisadmin:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: phpredisadmin
    ports:
      - "${REDISMYADMIN_HOST_PORT}:80"
    networks:
      - default
    environment:
      - REDIS_1_HOST=redis
      - REDIS_1_PORT=6379
      - TZ=$TZ



  # MongoDB是专为可扩展性，高性能和高可用性而设计的数据库。
  # 它可以从单服务器部署扩展到大型、复杂的多数据中心架构。
  # 利用内存计算的优势，MongoDB能够提供高性能的数据读写操作。
  # MongoDB的本地复制和自动故障转移功能使您的应用程序具有企业级的可靠性和操作灵活性。
  mongodb:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_INITDB_ROOT_PASSWORD}"
      TZ: "$TZ"
    volumes:
      - ${DATA_DIR}/mongo:/data/db:rw
      - ${DATA_DIR}/mongo_key:/mongo:rw
      - ${MONGODB_LOG_DIR}:/var/log/mongo/:rw
    ports:
      - "${MONGODB_HOST_PORT}:27017"
    networks:
      - default
    command:
      --auth

  # adminMongo是一个跨平台用户界面（GUI），用于处理您的所有MongoDB连接/数据库需求。
  # adminMongo具有完全响应能力，应该可以在多种设备上运行。
  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    ports:
      - "${ADMINMONGO_HOST_PORT}:1234"
    environment:
      - HOST=0.0.0.0
      - DB_HOST=mongodb
      - DB_PORT=27017
    networks:
      - default

  # Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。
  # 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。
  elasticsearch:
    build:
      context: ./services/elasticsearch
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
    container_name: elasticsearch
    environment:
      - TZ=$TZ
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${ELASTICSEARCH_LOG_DIR}:/usr/share/elasticsearch/:rw
    hostname: elasticsearch
    restart: always
    ports:
      - "${ELASTICSEARCH_HOST_PORT_C}:9200"
      - "${ELASTICSEARCH_HOST_PORT_S}:9300"

  # ElasticSearch插件： Kibana 是一个免费且开放的用户界面，
  # 能够让您对 Elasticsearch 数据进行可视化，并让您在 Elastic Stack 中进行导航。
  kibana:
    image: kibana:${KIBANA_VERSION}
    container_name: kibana
    environment:
      TZ: "$TZ"
      elasticsearch.hosts: http://elasticsearch:9200
      I18N_LOCALE: "${KIBANA_I18N_LOCALE}"
    hostname: kibana
    depends_on:
      - elasticsearch
    restart: always
    ports:
      - "${KIBANA_HOST}:5601"

  # ElasticSearch插件：Logstash 是免费且开放的服务器端数据处理管道，
  # 能够从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。
  logstash:
    image: logstash:${LOGSTASH_VERSION}
    container_name: logstash
    hostname: logstash
    restart: always
    depends_on:
      - elasticsearch
    environment:
      TZ: "$TZ"
    ports:
      - "${LOGSTASH_HOST_PORT_C}:9600"
      - "${LOGSTASH_HOST_PORT_S}:5044"

  # Node.js 是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境.
  node:
    image: node:${NODE_VERSION}
    environment:
      - NODE_ENV=production
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NODE_LOG_DIR}:/var/log/node/:rw
    expose:
      - "8081"
    networks:
      - default
    stdin_open: true
    tty: true

  # Supervisor是一个客户端/服务器系统，允许其用户监视和控制类似UNIX的操作系统上的许多进程。
  # 它具有一些相同的程序目标，例如launchd， daemontools和runit。
  # 与这些程序中的某些程序不同，它并不旨在代替init的“进程ID 1”运行。
  # 相反，它旨在用于控制与项目或客户相关的过程，并且旨在在启动时像任何其他程序一样启动。
  supervisor:
    build:
      context: ./services/supervisor
      args:
        ALPINE_VERSION: alpine:${ALPINE_VERSION}
        TZ: "$TZ"
    container_name: supervisor
    ports:
      - "${SUPERVISOR_HOST_PORT_C}:9001"
    volumes:
      - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw
      - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw
      - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro
    command:
      - /bin/sh
      - -c
      - |
        supervisord -n -c /etc/supervisor/supervisord.conf
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default

networks:
  default:
